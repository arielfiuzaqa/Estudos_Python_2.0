BANCO DE DADOS EXPLICA√á√ïES INICIAIS

Diferen√ßas entre Mem√≥ria Ram e Mem√≥ria HD/SSD
- Mem√≥ria Ram: Mem√≥ria de Curto Prazo mas com velocidade de acesso muito alta. 
    Acessos a informa√ß√µes muito rapidamente, alta lat√™ncia.

- Mem√≥ria de Longo Prazo: √â uma Mem√≥ria longa mas em compensa√ß√£o √© lenta, o que dificulta
ler e acessar os dados rapidamente.
    HD: Disco girando com uma agulha, o disco tem que girar ate pegar todas as informa√ß√µes
    que precisa. 

    SSD: N√£o √© uma pe√ßa girando, dependendo de eletricidade para funcionar mas ainda assim √â
    Muito mais r√°pido que o HD mas mesmo assim ainda √© mais lenta do que uma Mem√≥ria Ram
    por ser uma Mem√≥ria de longo prazo.



Banco de Dados

Quando um usu√°rio utiliza e cadastrar certas infomrma√ß√µes para usar depois novamente queremos
que esteja l√° todos os dados e em alguns projetos fizemos isso em documentos .txt e documentos
.json onde qualquer um pode ir l√° e abrir o arquivo e apagar ou simplesmente ver dados sensiveis
o que pode ter problemas com seguran√ßa e perda de dados sens√≠veis durante os processos de armazenamentos. 
Com a estrutura de banco de dados podemos ter uma melhor rela√ß√£o entre tabelas seguran√ßas, niveis de 
acessos e muitos outros recursos que potencializam a solidez das informa√ß√µes. Fora isso, temos ainda que
pela robustez das linguagens m√£es dos bancos de dados fica mais dificil apagar ou alterar alguma informa√ß√£o
e tamb√©m para ter alta performance com milhares de dados extremamente alta.

OBS: No curso vamos ter uma  palhinha de banco de dados SQL mas n√£o vai ser t√£o aprofundada o que n√£o quer 
que eu n√£o deva aprender mais sobre para trabalhar melhor dentro das empresas que possuem Legados. Pois vamos
usar Django e Python comandos como ORM () vamos fazer queries no nosso banco de dados, consultas e manipula√ß√µes
atraves da linguagem Python.


üéØ 1. Banco de Dados Relacional (RDBMS)

‚úÖ Conceito:

Baseados em tabelas (linhas e colunas).
Cada tabela representa uma entidade (clientes, pedidos, produtos...).
As tabelas podem se relacionar entre si por chaves prim√°rias e chaves estrangeiras.
Usam SQL (Structured Query Language) para manipular os dados.

‚úÖ Principais caracter√≠sticas:

Estrutura r√≠gida (esquema fixo).
Forte consist√™ncia de dados (ACID properties: Atomicidade, Consist√™ncia, Isolamento, Durabilidade).
Ideal para transa√ß√µes financeiras, ERP, sistemas de controle de estoque, sistemas banc√°rios.

‚úÖ Exemplos de bancos de dados relacionais:

Banco de Dados	        Caracter√≠stica Especial
MySQL	                Popular em aplica√ß√µes web.
PostgreSQL	            Focado em consist√™ncia e recursos avan√ßados.
SQLite	                Banco de dados embutido em aplicativos locais.
Oracle Database	        Robusto para grandes corpora√ß√µes.
Microsoft SQL Server	Integrado com solu√ß√µes Microsoft.



üéØ 2. Banco de Dados N√£o Relacional (NoSQL)

‚úÖ Conceito:

Baseados em estruturas flex√≠veis: documentos, grafos, colunas, pares chave-valor.
Sem necessidade de estrutura r√≠gida (sem esquemas fixos).
Focados em velocidade, escala horizontal (adicionar servidores facilmente) e flexibilidade.

‚úÖ Tipos de bancos n√£o relacionais:

Tipo	        Estrutura	                                Exemplo
Documentos	    JSON ou BSON	                            MongoDB
Chave-Valor	    Pares simples de chave e valor	Redis,      DynamoDB
Colunar	        Armazenam dados em colunas, n√£o em linhas	Apache Cassandra
Grafos	        Representam dados em grafos (n√≥s e arestas)	Neo4j

‚úÖ Principais caracter√≠sticas:
Escalabilidade horizontal f√°cil.
Flex√≠vel (n√£o precisa definir esquema antes).
Ideal para aplica√ß√µes web de alta performance, big data, redes sociais, sistemas de recomenda√ß√£o.


‚ö° Resumindo a Diferen√ßa:

Aspecto         | Banco Relacional                                 | Banco N√£o Relacional
Estrutura       | Tabelas fixas (linhas e colunas)                 | Estruturas flex√≠veis (documentos, grafos, chave-valor)
Linguagem       | SQL                                              | Varia: consultas espec√≠ficas (ex: MongoDB Query Language)
Rigor           | Alta consist√™ncia e integridade de dados         | Flexibilidade e velocidade
Escalabilidade  | Principalmente vertical (m√°quinas mais potentes) | Principalmente horizontal (mais m√°quinas)
Uso Ideal       | Finan√ßas, ERP, CRM, sistemas cr√≠ticos            | Big data, apps em nuvem, IoT, redes sociais


üî• Exemplos concretos:

Situa√ß√£o                                        | Banco Indicado
Gerenciar sistema banc√°rio, controle de estoque | Relacional (MySQL, PostgreSQL)
Construir rede social com milh√µes de usu√°rios   | N√£o Relacional (MongoDB, Cassandra)
Armazenar hist√≥rico de login r√°pido             | N√£o Relacional (Redis)
Gerenciar sistema de vendas para e-commerce     | Relacional (PostgreSQL)
Analisar conex√µes de amigos (redes sociais)     | N√£o Relacional (Neo4j - Grafos)



SGBD - Sistema Gerenciador de Banco de Dados
Temos varios comandos j√° salvos de cria√ß√£o de bancos e outros, como n√£o conseguimos instalar o banco de dados
nesse computador da empresa vamos simplesmente fazer a base para usar no pc particular.
Aprendendo a montar tudo direitinho mas sem precisar de uma conex√£o em si.


ORM'S e ao SQLAlchemy
1 - Introdu√ß√£o a ORM'S e ao SQLAlchemy
Criando Tabela atraves de uma classe da linguagem Python, pois se chama Objeto com Banco de Dados Relacional
J√° vem de integra√ß√£o orientada a Objetos, assim podemos entender uma classe de Python como uma tabela do
Banco de Dados. 
Para declara√ß√£o de constantes que n√£o devem ser mudadas com LETRAS MAIUSCULAS TODAS.
Por motivos de acesso n√£o estou conseguindo fazer diretamente por um banco de Dado como MySQL ent√£o estou usando o SQLite.
Mas isso n√£o impede nada de critico nesse problema

2 - Teoria sobre Sessions e inser√ß√µes em tabela
Estamos criando um ORM2.py para trabalhar algumas iner√ß√µes na tabela que criamos no ORM.py
pois podemos criar ORMs diferente para objetivos diferentes, no caso o primeiro deixamos para
cria√ß√£o de tabelas e agora come√ßamos a colocar usu√°rios dentro do nosso banco na primeira tabale uhuuuw

